done
- implement immediate store/load instructions, 6xnn and 8yx0
- implement add/subtract, 8xy4 8xy5 8xy7
- implement and or xor, 8xy2 8xy1 8xy3
- implement shift left/right, 8xy6 8xye
- implement jumps, 1nnn bnnn
- implement subroutine handling, 2nnn 00ee
- implement branching, 3xnn 5xy0 4xnn 9xy0
- implement i-register instructions, annn fx1e
- implement memory store/load instructions, fx55 fx65
- disassembler
- implement debug flag to enable/disable reg/mem dump
- set delay timer to auto-decrement each loop
- set audio timer to auto-decrement each loop
- implement delay timer, fx15 fx07
- implement sound timer, fx18
- implement random, cxnn
- load default hex sprites to memory 0x000-0x200
- implement i-reg sprite instruction, fx29
- implement binary-coded decimal fx33
- implement keypad input mechanism
- implement keypad instructions, fx0a ex9e exa1
- create graphics area (64x32)
- create graphics draw code. (each loop, read graphics array to screen)
- implement clear screen instruction, 00e0
- implement sprite draw instruction, dxyn
- move debug messages into messageWindow
- check if file exists before running

todo
- pre-emulation, wait for keypress to continue. pre-emulation screen should explain controls.
- create controls
	- pause/resume/step
	- do/don't display debug registers/verbose debug text. (off by default)
	- halt emulation
	- modifying emulation speed
		- delay timer should be related to emulation speed. (delay/sound sleep calculated as a fraction of global speed variable?)
	- emulation quirks
- investigate fx55, fx65... some references define these differently
- create unit tests for instructions. test edge cases!
- how do i implement sound? terminal ding?

backlog
- merge 'run', 'disassemble' methods? not sure...
- generalize GUI code to allow a different gui framework
